package utils

import (
	"context"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/google/generative-ai-go/genai" // Import the Gemini Go SDK
	"google.golang.org/api/option"             // Required for passing API key explicitly if not using env var
)

var geminiClient *genai.Client

func setupGeminiClient() error {
	if geminiClient != nil {
		return nil // already initialized
	}

	apiKey := os.Getenv("GEMINI_API_KEY")
	if apiKey == "" {
		return fmt.Errorf("GEMINI_API_KEY is not set")
	}

	client, err := genai.NewClient(context.Background(), option.WithAPIKey(apiKey))
	if err != nil {
		return fmt.Errorf("failed to create Gemini client: %w", err)
	}

	geminiClient = client
	log.Println("âœ… Gemini client initialized")
	return nil
}

func SummarizeQnA(question string, answers []string) (string, error) {
	if err := setupGeminiClient(); err != nil {
		return "", err
	}

	fmt.Println("Client loaded:", geminiClient != nil)

	var sb strings.Builder
	sb.WriteString("Question:\n" + question + "\n\nAnswers:\n")
	for i, a := range answers {
		sb.WriteString(fmt.Sprintf("- Answer %d: %s\n", i+1, a))
	}

	promptText := fmt.Sprintf(`
You are a helpful assistant that summarizes technical Q&A discussions.
Given the following StackOverflow question and its answers, write a clear, concise summary of the discussion:

%s
`, sb.String())
	model := geminiClient.GenerativeModel("gemini-2.5-flash")
	resp, err := model.GenerateContent(context.Background(), genai.Text(promptText))
	if err != nil {
		return "", fmt.Errorf("failed to generate content from Gemini API: %w", err)
	}

	if resp != nil && len(resp.Candidates) > 0 {
		var summaryBuilder strings.Builder
		for _, part := range resp.Candidates[0].Content.Parts {
			if txt, ok := part.(genai.Text); ok {
				summaryBuilder.WriteString(string(txt))
			}
		}
		return strings.TrimSpace(summaryBuilder.String()), nil
	}

	return "", fmt.Errorf("no content generated by Gemini API")
}
